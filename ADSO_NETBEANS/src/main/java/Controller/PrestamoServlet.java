package Controller;

import DAO.PrestamoDAO;
import DAO.LibroDAO;
import DAO.UsuarioDAO;
import DTO.PrestamoDTO;
import DTO.LibroDTO;
import DTO.UsuarioDTO;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.sql.Date;
import java.time.LocalDate;
import java.util.List;

/**
 * Servlet para manejar operaciones con pr√©stamos - Versi√≥n mejorada
 * @author HAWLETH
 */
@WebServlet(name = "PrestamoServlet", urlPatterns = {
    "/prestamos", "/prestamo-nuevo", "/prestamo-editar", "/prestamo-devolver", 
    "/prestamo-eliminar", "/mis-prestamos", "/prestamos-vencidos", 
    "/generar-pdf", "/generar-excel"
})
public class PrestamoServlet extends HttpServlet {
    
    private PrestamoDAO prestamoDAO;
    private LibroDAO libroDAO;
    private UsuarioDAO usuarioDAO;
    
    @Override
    public void init() throws ServletException {
        System.out.println("üî• PrestamoServlet.init() - Inicializando servlet");
        prestamoDAO = new PrestamoDAO();
        libroDAO = new LibroDAO();
        usuarioDAO = new UsuarioDAO();
        System.out.println("‚úÖ PrestamoServlet.init() - DAOs inicializados");
    }
    
    /**
     * Maneja las peticiones GET
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String action = request.getServletPath();
        System.out.println("üîç PrestamoServlet.doGet() - Action: " + action);
        
        switch (action) {
            case "/prestamos":
                mostrarListaPrestamos(request, response);
                break;
            case "/prestamo-nuevo":
                mostrarFormularioNuevo(request, response);
                break;
            case "/prestamo-editar":
                mostrarFormularioEditar(request, response);
                break;
            case "/prestamo-devolver":
                devolverLibro(request, response);
                break;
            case "/prestamo-eliminar":
                eliminarPrestamo(request, response);
                break;
            case "/mis-prestamos":
                mostrarMisPrestamos(request, response);
                break;
            case "/prestamos-vencidos":
                mostrarPrestamosVencidos(request, response);
                break;
            case "/generar-pdf":
                generarComprobantePDF(request, response);
                break;
            case "/generar-excel":
                generarReporteExcel(request, response);
                break;
            default:
                System.out.println("‚ùå Acci√≥n no reconocida: " + action);
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                break;
        }
    }
    
    /**
     * Maneja las peticiones POST
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String action = request.getServletPath();
        System.out.println("üìù PrestamoServlet.doPost() - Action: " + action);
        
        switch (action) {
            case "/prestamo-nuevo":
                crearPrestamo(request, response);
                break;
            case "/prestamo-editar":
                actualizarPrestamo(request, response);
                break;
            default:
                System.out.println("‚ùå Acci√≥n POST no reconocida: " + action);
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                break;
        }
    }
    
    /**
     * Muestra la lista de todos los pr√©stamos (solo para admin)
     */
    private void mostrarListaPrestamos(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("üìö mostrarListaPrestamos() - Iniciando");
        
        // Verificar autenticaci√≥n y permisos de admin
        if (!LoginServlet.usuarioEstaLogueado(request) || !LoginServlet.usuarioEsAdmin(request)) {
            System.out.println("‚ùå Usuario no autorizado para ver pr√©stamos");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            List<PrestamoDTO> prestamos = prestamoDAO.obtenerTodosPrestamos();
            String[] estadisticas = prestamoDAO.obtenerEstadisticasPrestamos();
            
            System.out.println("üìä Datos cargados:");
            System.out.println("   - Total pr√©stamos: " + prestamos.size());
            System.out.println("   - Estad√≠sticas: " + java.util.Arrays.toString(estadisticas));
            
            request.setAttribute("prestamos", prestamos);
            request.setAttribute("totalPrestamos", estadisticas[0]);
            request.setAttribute("prestamosActivos", estadisticas[1]);
            request.setAttribute("prestamosDevueltos", estadisticas[2]);
            request.setAttribute("prestamosVencidos", estadisticas[3]);
            
            request.getRequestDispatcher("/prestamos.jsp").forward(request, response);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en mostrarListaPrestamos(): " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Error al cargar la lista de pr√©stamos");
            request.getRequestDispatcher("/prestamos.jsp").forward(request, response);
        }
    }
    
    /**
     * Muestra el formulario para crear un nuevo pr√©stamo
     */
    private void mostrarFormularioNuevo(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("‚ûï mostrarFormularioNuevo() - Iniciando");
        
        // Verificar autenticaci√≥n
        if (!LoginServlet.usuarioEstaLogueado(request)) {
            System.out.println("‚ùå Usuario no autenticado");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            // Obtener libros disponibles
            List<LibroDTO> librosDisponibles = libroDAO.obtenerLibrosDisponibles();
            System.out.println("üìö Libros disponibles: " + librosDisponibles.size());
            
            // Si es admin, puede prestar a cualquier usuario
            List<UsuarioDTO> usuarios = null;
            if (LoginServlet.usuarioEsAdmin(request)) {
                usuarios = usuarioDAO.obtenerTodosUsuarios();
                System.out.println("üë• Usuarios disponibles: " + usuarios.size());
            }
            
            request.setAttribute("librosDisponibles", librosDisponibles);
            request.setAttribute("usuarios", usuarios);
            
            request.getRequestDispatcher("/prestamo-form.jsp").forward(request, response);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en mostrarFormularioNuevo(): " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Error al cargar el formulario");
            request.getRequestDispatcher("/prestamo-form.jsp").forward(request, response);
        }
    }
    
    /**
     * Muestra el formulario para editar un pr√©stamo existente
     */
    private void mostrarFormularioEditar(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("‚úèÔ∏è mostrarFormularioEditar() - Iniciando");
        
        // Verificar autenticaci√≥n y permisos de admin
        if (!LoginServlet.usuarioEstaLogueado(request) || !LoginServlet.usuarioEsAdmin(request)) {
            System.out.println("‚ùå Usuario no autorizado para editar pr√©stamos");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            String idStr = request.getParameter("id");
            System.out.println("üîç ID de pr√©stamo a editar: " + idStr);
            
            int id = Integer.parseInt(idStr);
            PrestamoDTO prestamo = prestamoDAO.obtenerPrestamoPorId(id);
            
            if (prestamo != null) {
                // Obtener listas para los select
                List<LibroDTO> librosDisponibles = libroDAO.obtenerLibrosDisponibles();
                List<UsuarioDTO> usuarios = usuarioDAO.obtenerTodosUsuarios();
                
                request.setAttribute("prestamo", prestamo);
                request.setAttribute("librosDisponibles", librosDisponibles);
                request.setAttribute("usuarios", usuarios);
                request.setAttribute("accion", "editar");
                
                System.out.println("üìù Mostrando formulario editar pr√©stamo ID: " + id);
                request.getRequestDispatcher("/prestamo-form.jsp").forward(request, response);
            } else {
                System.out.println("‚ùå Pr√©stamo no encontrado con ID: " + id);
                request.getSession().setAttribute("error", "Pr√©stamo no encontrado");
                response.sendRedirect(request.getContextPath() + "/prestamos");
            }
            
        } catch (NumberFormatException e) {
            System.err.println("‚ùå ID de pr√©stamo inv√°lido: " + request.getParameter("id"));
            request.getSession().setAttribute("error", "ID de pr√©stamo inv√°lido");
            response.sendRedirect(request.getContextPath() + "/prestamos");
        } catch (Exception e) {
            System.err.println("‚ùå Error en mostrarFormularioEditar(): " + e.getMessage());
            e.printStackTrace();
            request.getSession().setAttribute("error", "Error al cargar el formulario de edici√≥n");
            response.sendRedirect(request.getContextPath() + "/prestamos");
        }
    }
    
    /**
     * Muestra los pr√©stamos del usuario logueado
     */
    private void mostrarMisPrestamos(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("üë§ mostrarMisPrestamos() - Iniciando");
        
        // Verificar autenticaci√≥n
        if (!LoginServlet.usuarioEstaLogueado(request)) {
            System.out.println("‚ùå Usuario no autenticado");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            UsuarioDTO usuario = LoginServlet.obtenerUsuarioLogueado(request);
            List<PrestamoDTO> prestamos = prestamoDAO.obtenerPrestamosPorUsuario(usuario.getId());
            
            System.out.println("üìä Pr√©stamos del usuario " + usuario.getNombre() + ": " + prestamos.size());
            
            request.setAttribute("prestamos", prestamos);
            request.setAttribute("esMisPrestamos", true);
            
            request.getRequestDispatcher("/mis-prestamos.jsp").forward(request, response);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en mostrarMisPrestamos(): " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Error al cargar sus pr√©stamos");
            request.getRequestDispatcher("/mis-prestamos.jsp").forward(request, response);
        }
    }
    
    /**
     * Muestra los pr√©stamos vencidos (solo para admin)
     */
    private void mostrarPrestamosVencidos(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("‚è∞ mostrarPrestamosVencidos() - Iniciando");
        
        // Verificar autenticaci√≥n y permisos de admin
        if (!LoginServlet.usuarioEstaLogueado(request) || !LoginServlet.usuarioEsAdmin(request)) {
            System.out.println("‚ùå Usuario no autorizado para ver pr√©stamos vencidos");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            List<PrestamoDTO> prestamosVencidos = prestamoDAO.obtenerPrestamosVencidos();
            
            System.out.println("‚ö†Ô∏è Pr√©stamos vencidos encontrados: " + prestamosVencidos.size());
            
            request.setAttribute("prestamos", prestamosVencidos);
            request.setAttribute("esVencidos", true);
            
            request.getRequestDispatcher("/prestamos-vencidos.jsp").forward(request, response);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en mostrarPrestamosVencidos(): " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Error al cargar pr√©stamos vencidos");
            request.getRequestDispatcher("/prestamos-vencidos.jsp").forward(request, response);
        }
    }
    
    /**
     * Crea un nuevo pr√©stamo
     */
    private void crearPrestamo(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("üìö crearPrestamo() - Iniciando creaci√≥n de pr√©stamo");
        
        // Verificar autenticaci√≥n
        if (!LoginServlet.usuarioEstaLogueado(request)) {
            System.out.println("‚ùå Usuario no autenticado");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            // Obtener datos del formulario
            String idLibroStr = request.getParameter("idLibro");
            String idUsuarioStr = request.getParameter("idUsuario");
            String fechaDevolucionStr = request.getParameter("fechaDevolucion");
            
            System.out.println("üìù Datos recibidos:");
            System.out.println("   - ID Libro: " + idLibroStr);
            System.out.println("   - ID Usuario: " + idUsuarioStr);
            System.out.println("   - Fecha Devoluci√≥n: " + fechaDevolucionStr);
            
            // Validar datos b√°sicos
            if (idLibroStr == null || idLibroStr.trim().isEmpty() ||
                fechaDevolucionStr == null || fechaDevolucionStr.trim().isEmpty()) {
                
                System.out.println("‚ùå Datos incompletos");
                request.setAttribute("error", "Los campos libro y fecha de devoluci√≥n son obligatorios");
                mostrarFormularioNuevo(request, response);
                return;
            }
            
            int idLibro = Integer.parseInt(idLibroStr);
            int idUsuario;
            
            // Si es admin, puede elegir el usuario; si no, es el usuario logueado
            if (LoginServlet.usuarioEsAdmin(request)) {
                if (idUsuarioStr == null || idUsuarioStr.trim().isEmpty()) {
                    System.out.println("‚ùå Usuario no seleccionado (admin)");
                    request.setAttribute("error", "Debe seleccionar un usuario");
                    mostrarFormularioNuevo(request, response);
                    return;
                }
                idUsuario = Integer.parseInt(idUsuarioStr);
            } else {
                UsuarioDTO usuarioLogueado = LoginServlet.obtenerUsuarioLogueado(request);
                idUsuario = usuarioLogueado.getId();
            }
            
            // Validar que el libro est√© disponible
            LibroDTO libro = libroDAO.obtenerLibroPorId(idLibro);
            if (libro == null || !libro.isDisponible()) {
                System.out.println("‚ùå Libro no disponible: " + idLibro);
                request.setAttribute("error", "El libro seleccionado no est√° disponible");
                mostrarFormularioNuevo(request, response);
                return;
            }
            
            // Verificar que el libro no est√© ya prestado
            if (prestamoDAO.libroEstaPrestado(idLibro)) {
                System.out.println("‚ùå Libro ya prestado: " + idLibro);
                request.setAttribute("error", "El libro ya est√° prestado a otro usuario");
                mostrarFormularioNuevo(request, response);
                return;
            }
            
            // Crear fechas
            Date fechaPrestamo = Date.valueOf(LocalDate.now());
            Date fechaDevolucion = Date.valueOf(fechaDevolucionStr);
            
            // Validar que la fecha de devoluci√≥n sea futura
            if (fechaDevolucion.before(fechaPrestamo)) {
                System.out.println("‚ùå Fecha de devoluci√≥n en el pasado");
                request.setAttribute("error", "La fecha de devoluci√≥n debe ser posterior a hoy");
                mostrarFormularioNuevo(request, response);
                return;
            }
            
            // Validar que no exceda el l√≠mite de d√≠as (30 d√≠as)
            long diferenciaDias = (fechaDevolucion.getTime() - fechaPrestamo.getTime()) / (1000 * 60 * 60 * 24);
            if (diferenciaDias > 30) {
                System.out.println("‚ùå Per√≠odo de pr√©stamo excede 30 d√≠as: " + diferenciaDias);
                request.setAttribute("error", "El per√≠odo de pr√©stamo no puede exceder 30 d√≠as");
                mostrarFormularioNuevo(request, response);
                return;
            }
            
            // Crear pr√©stamo
            PrestamoDTO prestamo = new PrestamoDTO(idUsuario, idLibro, fechaPrestamo, fechaDevolucion, false);
            
            System.out.println("üíæ Guardando pr√©stamo en base de datos...");
            
            if (prestamoDAO.crearPrestamo(prestamo)) {
                // Marcar el libro como no disponible
                libroDAO.cambiarDisponibilidad(idLibro, false);
                
                System.out.println("‚úÖ Pr√©stamo creado exitosamente");
                request.getSession().setAttribute("mensaje", "Pr√©stamo creado exitosamente para el libro: " + libro.getTitulo());
                
                // Redirigir seg√∫n el rol
                if (LoginServlet.usuarioEsAdmin(request)) {
                    response.sendRedirect(request.getContextPath() + "/prestamos");
                } else {
                    response.sendRedirect(request.getContextPath() + "/mis-prestamos");
                }
            } else {
                System.out.println("‚ùå Error al guardar pr√©stamo en BD");
                request.setAttribute("error", "Error al crear el pr√©stamo en la base de datos");
                mostrarFormularioNuevo(request, response);
            }
            
        } catch (NumberFormatException e) {
            System.err.println("‚ùå Datos num√©ricos inv√°lidos: " + e.getMessage());
            request.setAttribute("error", "Datos inv√°lidos en el formulario");
            mostrarFormularioNuevo(request, response);
        } catch (Exception e) {
            System.err.println("‚ùå Error inesperado en crearPrestamo(): " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Error inesperado: " + e.getMessage());
            mostrarFormularioNuevo(request, response);
        }
    }
    
    /**
     * Actualiza un pr√©stamo existente
     */
    private void actualizarPrestamo(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("‚úèÔ∏è actualizarPrestamo() - Iniciando actualizaci√≥n de pr√©stamo");
        
        // Verificar autenticaci√≥n y permisos de admin
        if (!LoginServlet.usuarioEstaLogueado(request) || !LoginServlet.usuarioEsAdmin(request)) {
            System.out.println("‚ùå Usuario no autorizado para editar pr√©stamos");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            String idStr = request.getParameter("id");
            String fechaDevolucionStr = request.getParameter("fechaDevolucion");
            
            System.out.println("üìù Datos recibidos para actualizaci√≥n:");
            System.out.println("   - ID: " + idStr);
            System.out.println("   - Nueva fecha devoluci√≥n: " + fechaDevolucionStr);
            
            // Validar ID
            int id = Integer.parseInt(idStr);
            
            // Validar fecha
            if (fechaDevolucionStr == null || fechaDevolucionStr.trim().isEmpty()) {
                request.setAttribute("error", "La fecha de devoluci√≥n es obligatoria");
                mostrarFormularioEditar(request, response);
                return;
            }
            
            Date nuevaFechaDevolucion = Date.valueOf(fechaDevolucionStr);
            
            // Validar que la fecha sea futura (solo para pr√©stamos no devueltos)
            PrestamoDTO prestamoActual = prestamoDAO.obtenerPrestamoPorId(id);
            if (prestamoActual != null && !prestamoActual.isDevuelto()) {
                Date hoy = Date.valueOf(LocalDate.now());
                if (nuevaFechaDevolucion.before(hoy)) {
                    request.setAttribute("error", "La fecha de devoluci√≥n debe ser posterior a hoy para pr√©stamos activos");
                    mostrarFormularioEditar(request, response);
                    return;
                }
            }
            
            System.out.println("üíæ Actualizando fecha de devoluci√≥n...");
            
            if (prestamoDAO.actualizarFechaDevolucion(id, nuevaFechaDevolucion)) {
                System.out.println("‚úÖ Pr√©stamo actualizado exitosamente");
                request.getSession().setAttribute("mensaje", "Fecha de devoluci√≥n actualizada exitosamente");
                response.sendRedirect(request.getContextPath() + "/prestamos");
            } else {
                System.out.println("‚ùå Error al actualizar pr√©stamo en BD");
                request.setAttribute("error", "Error al actualizar el pr√©stamo");
                mostrarFormularioEditar(request, response);
            }
            
        } catch (NumberFormatException e) {
            System.err.println("‚ùå ID inv√°lido: " + request.getParameter("id"));
            request.setAttribute("error", "ID de pr√©stamo inv√°lido");
            response.sendRedirect(request.getContextPath() + "/prestamos");
        } catch (Exception e) {
            System.err.println("‚ùå Error inesperado en actualizarPrestamo(): " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Error inesperado: " + e.getMessage());
            response.sendRedirect(request.getContextPath() + "/prestamos");
        }
    }
    
    /**
     * Marca un pr√©stamo como devuelto
     */
    private void devolverLibro(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("üîÑ devolverLibro() - Iniciando devoluci√≥n");
        
        // Verificar autenticaci√≥n
        if (!LoginServlet.usuarioEstaLogueado(request)) {
            System.out.println("‚ùå Usuario no autenticado");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            String idStr = request.getParameter("id");
            System.out.println("üîç ID de pr√©stamo a devolver: " + idStr);
            
            int idPrestamo = Integer.parseInt(idStr);
            
            // Obtener informaci√≥n del pr√©stamo
            PrestamoDTO prestamo = prestamoDAO.obtenerPrestamoPorId(idPrestamo);
            
            if (prestamo == null) {
                System.out.println("‚ùå Pr√©stamo no encontrado: " + idPrestamo);
                request.getSession().setAttribute("error", "Pr√©stamo no encontrado");
            } else if (prestamo.isDevuelto()) {
                System.out.println("‚ùå Libro ya devuelto: " + idPrestamo);
                request.getSession().setAttribute("error", "Este libro ya fue devuelto");
            } else {
                // Verificar permisos: admin puede devolver cualquier libro, 
                // usuario normal solo sus propios pr√©stamos
                UsuarioDTO usuarioLogueado = LoginServlet.obtenerUsuarioLogueado(request);
                
                if (!LoginServlet.usuarioEsAdmin(request) && 
                    prestamo.getIdUsuario() != usuarioLogueado.getId()) {
                    System.out.println("‚ùå Sin permisos para devolver este libro");
                    request.getSession().setAttribute("error", "No tienes permisos para devolver este libro");
                } else {
                    // Marcar como devuelto
                    Date fechaDevolucion = Date.valueOf(LocalDate.now());
                    
                    System.out.println("üíæ Marcando como devuelto...");
                    
                    if (prestamoDAO.marcarComoDevuelto(idPrestamo, fechaDevolucion)) {
                        // Marcar el libro como disponible
                        libroDAO.cambiarDisponibilidad(prestamo.getIdLibro(), true);
                        
                        System.out.println("‚úÖ Libro devuelto exitosamente");
                        request.getSession().setAttribute("mensaje", "Libro devuelto exitosamente");
                    } else {
                        System.out.println("‚ùå Error al procesar devoluci√≥n en BD");
                        request.getSession().setAttribute("error", "Error al procesar la devoluci√≥n");
                    }
                }
            }
            
            // Redirigir seg√∫n el contexto
            if (LoginServlet.usuarioEsAdmin(request)) {
                response.sendRedirect(request.getContextPath() + "/prestamos");
            } else {
                response.sendRedirect(request.getContextPath() + "/mis-prestamos");
            }
            
        } catch (NumberFormatException e) {
            System.err.println("‚ùå ID de pr√©stamo inv√°lido: " + request.getParameter("id"));
            request.getSession().setAttribute("error", "ID de pr√©stamo inv√°lido");
            response.sendRedirect(request.getContextPath() + "/prestamos");
        } catch (Exception e) {
            System.err.println("‚ùå Error inesperado en devolverLibro(): " + e.getMessage());
            e.printStackTrace();
            request.getSession().setAttribute("error", "Error inesperado al procesar la devoluci√≥n");
            response.sendRedirect(request.getContextPath() + "/prestamos");
        }
    }
    
    /**
     * Elimina un pr√©stamo (solo admin)
     */
    private void eliminarPrestamo(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("üóëÔ∏è eliminarPrestamo() - Iniciando eliminaci√≥n");
        
        // Verificar autenticaci√≥n y permisos de admin
        if (!LoginServlet.usuarioEstaLogueado(request) || !LoginServlet.usuarioEsAdmin(request)) {
            System.out.println("‚ùå Usuario no autorizado para eliminar pr√©stamos");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            String idStr = request.getParameter("id");
            System.out.println("üîç ID de pr√©stamo a eliminar: " + idStr);
            
            int id = Integer.parseInt(idStr);
            
            // Obtener informaci√≥n del pr√©stamo antes de eliminarlo
            PrestamoDTO prestamo = prestamoDAO.obtenerPrestamoPorId(id);
            
            if (prestamo != null && !prestamo.isDevuelto()) {
                // Si el pr√©stamo no estaba devuelto, hacer el libro disponible
                libroDAO.cambiarDisponibilidad(prestamo.getIdLibro(), true);
                System.out.println("üìö Libro marcado como disponible: " + prestamo.getIdLibro());
            }
            
            System.out.println("üíæ Eliminando pr√©stamo de BD...");
            
            if (prestamoDAO.eliminarPrestamo(id)) {
                System.out.println("‚úÖ Pr√©stamo eliminado exitosamente");
                request.getSession().setAttribute("mensaje", "Pr√©stamo eliminado exitosamente");
            } else {
                System.out.println("‚ùå Error al eliminar pr√©stamo de BD");
                request.getSession().setAttribute("error", "Error al eliminar el pr√©stamo");
            }
            
            response.sendRedirect(request.getContextPath() + "/prestamos");
            
        } catch (NumberFormatException e) {
            System.err.println("‚ùå ID de pr√©stamo inv√°lido: " + request.getParameter("id"));
            request.getSession().setAttribute("error", "ID de pr√©stamo inv√°lido");
            response.sendRedirect(request.getContextPath() + "/prestamos");
        } catch (Exception e) {
            System.err.println("‚ùå Error inesperado en eliminarPrestamo(): " + e.getMessage());
            e.printStackTrace();
            request.getSession().setAttribute("error", "Error inesperado al eliminar el pr√©stamo");
            response.sendRedirect(request.getContextPath() + "/prestamos");
        }
    }
    
    /**
     * Genera comprobante de pr√©stamo en PDF
     */
    private void generarComprobantePDF(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("üìÑ generarComprobantePDF() - Iniciando");
        
        // Verificar autenticaci√≥n
        if (!LoginServlet.usuarioEstaLogueado(request)) {
            System.out.println("‚ùå Usuario no autenticado");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            String idStr = request.getParameter("id");
            System.out.println("üîç ID de pr√©stamo para PDF: " + idStr);
            
            int idPrestamo = Integer.parseInt(idStr);
            PrestamoDTO prestamo = prestamoDAO.obtenerPrestamoPorId(idPrestamo);
            
            if (prestamo == null) {
                System.out.println("‚ùå Pr√©stamo no encontrado: " + idPrestamo);
                request.getSession().setAttribute("error", "Pr√©stamo no encontrado");
                response.sendRedirect(request.getContextPath() + "/prestamos");
                return;
            }
            
            // Verificar permisos
            UsuarioDTO usuarioLogueado = LoginServlet.obtenerUsuarioLogueado(request);
            if (!LoginServlet.usuarioEsAdmin(request) && 
                prestamo.getIdUsuario() != usuarioLogueado.getId()) {
                System.out.println("‚ùå Sin permisos para generar comprobante");
                request.getSession().setAttribute("error", "No tienes permisos para generar este comprobante");
                response.sendRedirect(request.getContextPath() + "/prestamos");
                return;
            }
            
            // Generar comprobante HTML (como placeholder para PDF)
            System.out.println("üìÑ Generando comprobante HTML...");
            response.setContentType("text/html;charset=UTF-8");
            response.getWriter().write(generarComprobanteHTML(prestamo));
            
        } catch (NumberFormatException e) {
            System.err.println("‚ùå ID de pr√©stamo inv√°lido: " + request.getParameter("id"));
            request.getSession().setAttribute("error", "ID de pr√©stamo inv√°lido");
            response.sendRedirect(request.getContextPath() + "/prestamos");
        } catch (Exception e) {
            System.err.println("‚ùå Error inesperado en generarComprobantePDF(): " + e.getMessage());
            e.printStackTrace();
            request.getSession().setAttribute("error", "Error al generar el comprobante");
            response.sendRedirect(request.getContextPath() + "/prestamos");
        }
    }
    
    /**
     * Genera reporte de inventario en Excel
     */
    private void generarReporteExcel(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        System.out.println("üìä generarReporteExcel() - Iniciando");
        
        // Verificar autenticaci√≥n y permisos de admin
        if (!LoginServlet.usuarioEstaLogueado(request) || !LoginServlet.usuarioEsAdmin(request)) {
            System.out.println("‚ùå Usuario no autorizado para generar reportes");
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            // Obtener datos para el reporte
            List<PrestamoDTO> prestamos = prestamoDAO.obtenerTodosPrestamos();
            String[] estadisticas = prestamoDAO.obtenerEstadisticasPrestamos();
            
            System.out.println("üìä Generando reporte con " + prestamos.size() + " pr√©stamos");
            
            // Generar reporte HTML (como placeholder para Excel)
            response.setContentType("text/html;charset=UTF-8");
            response.getWriter().write(generarReporteHTML(prestamos, estadisticas));
            
        } catch (Exception e) {
            System.err.println("‚ùå Error inesperado en generarReporteExcel(): " + e.getMessage());
            e.printStackTrace();
            request.getSession().setAttribute("error", "Error al generar el reporte");
            response.sendRedirect(request.getContextPath() + "/admin-dashboard");
        }
    }
    
    /**
     * Genera el HTML del comprobante de pr√©stamo
     */
    private String generarComprobanteHTML(PrestamoDTO prestamo) {
        StringBuilder html = new StringBuilder();
        html.append("<!DOCTYPE html>");
        html.append("<html><head><title>Comprobante de Pr√©stamo</title>");
        html.append("<style>");
        html.append("body{font-family:Arial,sans-serif;margin:40px;background:#f8f9fa;}");
        html.append(".header{text-align:center;border-bottom:2px solid #007bff;padding-bottom:20px;margin-bottom:30px;}");
        html.append(".logo{font-size:24px;font-weight:bold;color:#007bff;margin-bottom:10px;}");
        html.append(".comprobante{background:white;padding:30px;border-radius:10px;box-shadow:0 5px 15px rgba(0,0,0,0.1);}");
        html.append(".info-row{display:flex;justify-content:space-between;margin-bottom:15px;padding:10px;background:#f8f9fa;border-radius:5px;}");
        html.append(".label{font-weight:bold;color:#495057;}");
        html.append(".value{color:#212529;}");
        html.append(".footer{text-align:center;margin-top:30px;padding-top:20px;border-top:1px solid #dee2e6;color:#6c757d;}");
        html.append(".status{padding:5px 15px;border-radius:20px;color:white;font-weight:bold;}");
        html.append(".status-activo{background:#ffc107;}");
        html.append(".status-devuelto{background:#28a745;}");
        html.append(".status-vencido{background:#dc3545;}");
        html.append("@media print{body{margin:0;background:white;}.comprobante{box-shadow:none;}}");
        html.append("</style></head><body>");
        
        html.append("<div class='comprobante'>");
        html.append("<div class='header'>");
        html.append("<div class='logo'>üìö Sistema de Biblioteca ADSO</div>");
        html.append("<h2>üìÑ Comprobante de Pr√©stamo</h2>");
        html.append("<p>Comprobante oficial de pr√©stamo de libro</p>");
        html.append("</div>");
        
        html.append("<div class='info-row'>");
        html.append("<span class='label'>üÜî ID Pr√©stamo:</span>");
        html.append("<span class='value'>#").append(prestamo.getId()).append("</span>");
        html.append("</div>");
        
        html.append("<div class='info-row'>");
        html.append("<span class='label'>üìñ Libro:</span>");
        html.append("<span class='value'>").append(prestamo.getTituloLibro()).append("</span>");
        html.append("</div>");
        
        html.append("<div class='info-row'>");
        html.append("<span class='label'>‚úçÔ∏è Autor:</span>");
        html.append("<span class='value'>").append(prestamo.getAutorLibro()).append("</span>");
        html.append("</div>");
        
        html.append("<div class='info-row'>");
        html.append("<span class='label'>üë§ Usuario:</span>");
        html.append("<span class='value'>").append(prestamo.getNombreUsuario()).append("</span>");
        html.append("</div>");
        
        html.append("<div class='info-row'>");
        html.append("<span class='label'>üìÖ Fecha Pr√©stamo:</span>");
        html.append("<span class='value'>").append(prestamo.getFechaPrestamo()).append("</span>");
        html.append("</div>");
        
        html.append("<div class='info-row'>");
        html.append("<span class='label'>üîÑ Fecha Devoluci√≥n:</span>");
        html.append("<span class='value'>").append(prestamo.getFechaDevolucion()).append("</span>");
        html.append("</div>");
        
        html.append("<div class='info-row'>");
        html.append("<span class='label'>üìä Estado:</span>");
        if (prestamo.isDevuelto()) {
            html.append("<span class='status status-devuelto'>‚úÖ Devuelto</span>");
        } else {
            // Verificar si est√° vencido
            java.util.Date hoy = new java.util.Date();
            if (prestamo.getFechaDevolucion().before(hoy)) {
                html.append("<span class='status status-vencido'>‚ö†Ô∏è Vencido</span>");
            } else {
                html.append("<span class='status status-activo'>‚è∞ Activo</span>");
            }
        }
        html.append("</div>");
        
        html.append("<div class='footer'>");
        html.append("<p><strong>üìç Biblioteca ADSO</strong></p>");
        html.append("<p>Tecnolog√≠a en An√°lisis y Desarrollo de Software</p>");
        html.append("<p>üìß biblioteca@adso.edu.co | ‚òéÔ∏è (123) 456-7890</p>");
        html.append("<p style='font-size:12px;margin-top:20px;'>Comprobante generado el: ").append(new java.util.Date()).append("</p>");
        html.append("<div style='margin-top:20px;'>");
        html.append("<button onclick='window.print()' style='background:#007bff;color:white;border:none;padding:10px 20px;border-radius:5px;margin-right:10px;cursor:pointer;'>üñ®Ô∏è Imprimir</button>");
        html.append("<button onclick='history.back()' style='background:#6c757d;color:white;border:none;padding:10px 20px;border-radius:5px;cursor:pointer;'>‚Üê Volver</button>");
        html.append("</div>");
        html.append("</div>");
        
        html.append("</div>");
        html.append("</body></html>");
        
        return html.toString();
    }
    
    /**
     * Genera el HTML del reporte de inventario
     */
    private String generarReporteHTML(List<PrestamoDTO> prestamos, String[] estadisticas) {
        StringBuilder html = new StringBuilder();
        html.append("<!DOCTYPE html>");
        html.append("<html><head><title>Reporte de Pr√©stamos</title>");
        html.append("<style>");
        html.append("body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa;}");
        html.append(".reporte{background:white;padding:30px;border-radius:10px;box-shadow:0 5px 15px rgba(0,0,0,0.1);}");
        html.append(".header{text-align:center;border-bottom:2px solid #28a745;padding-bottom:20px;margin-bottom:30px;}");
        html.append(".stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:20px;margin-bottom:30px;}");
        html.append(".stat-card{background:#f8f9fa;padding:20px;border-radius:10px;text-align:center;border-left:4px solid #28a745;}");
        html.append(".stat-number{font-size:2em;font-weight:bold;color:#28a745;}");
        html.append(".stat-label{color:#6c757d;margin-top:5px;}");
        html.append("table{width:100%;border-collapse:collapse;margin-top:20px;}");
        html.append("th,td{padding:12px;text-align:left;border-bottom:1px solid #ddd;}");
        html.append("th{background:#28a745;color:white;}");
        html.append("tr:hover{background:#f5f5f5;}");
        html.append(".badge{padding:5px 10px;border-radius:15px;font-size:0.8em;font-weight:bold;}");
        html.append(".badge-activo{background:#ffc107;color:#000;}");
        html.append(".badge-devuelto{background:#28a745;color:white;}");
        html.append(".badge-vencido{background:#dc3545;color:white;}");
        html.append("@media print{body{margin:0;background:white;}.reporte{box-shadow:none;}}");
        html.append("</style></head><body>");
        
        html.append("<div class='reporte'>");
        html.append("<div class='header'>");
        html.append("<h1>üìä Reporte de Pr√©stamos - Sistema de Biblioteca ADSO</h1>");
        html.append("<p>Reporte generado el: ").append(new java.util.Date()).append("</p>");
        html.append("</div>");
        
        // Estad√≠sticas
        html.append("<div class='stats'>");
        html.append("<div class='stat-card'>");
        html.append("<div class='stat-number'>").append(estadisticas[0]).append("</div>");
        html.append("<div class='stat-label'>üìö Total Pr√©stamos</div>");
        html.append("</div>");
        html.append("<div class='stat-card'>");
        html.append("<div class='stat-number'>").append(estadisticas[1]).append("</div>");
        html.append("<div class='stat-label'>‚è∞ Activos</div>");
        html.append("</div>");
        html.append("<div class='stat-card'>");
        html.append("<div class='stat-number'>").append(estadisticas[2]).append("</div>");
        html.append("<div class='stat-label'>‚úÖ Devueltos</div>");
        html.append("</div>");
        html.append("<div class='stat-card'>");
        html.append("<div class='stat-number'>").append(estadisticas[3]).append("</div>");
        html.append("<div class='stat-label'>‚ö†Ô∏è Vencidos</div>");
        html.append("</div>");
        html.append("</div>");
        
        // Tabla de pr√©stamos
        html.append("<h3>üìã Detalle de Pr√©stamos</h3>");
        html.append("<table>");
        html.append("<thead>");
        html.append("<tr>");
        html.append("<th>ID</th>");
        html.append("<th>Usuario</th>");
        html.append("<th>Libro</th>");
        html.append("<th>Autor</th>");
        html.append("<th>Fecha Pr√©stamo</th>");
        html.append("<th>Fecha Devoluci√≥n</th>");
        html.append("<th>Estado</th>");
        html.append("</tr>");
        html.append("</thead>");
        html.append("<tbody>");
        
        java.util.Date hoy = new java.util.Date();
        for (PrestamoDTO prestamo : prestamos) {
            html.append("<tr>");
            html.append("<td>#").append(prestamo.getId()).append("</td>");
            html.append("<td>").append(prestamo.getNombreUsuario()).append("</td>");
            html.append("<td>").append(prestamo.getTituloLibro()).append("</td>");
            html.append("<td>").append(prestamo.getAutorLibro()).append("</td>");
            html.append("<td>").append(prestamo.getFechaPrestamo()).append("</td>");
            html.append("<td>").append(prestamo.getFechaDevolucion()).append("</td>");
            html.append("<td>");
            
            if (prestamo.isDevuelto()) {
                html.append("<span class='badge badge-devuelto'>Devuelto</span>");
            } else if (prestamo.getFechaDevolucion().before(hoy)) {
                html.append("<span class='badge badge-vencido'>Vencido</span>");
            } else {
                html.append("<span class='badge badge-activo'>Activo</span>");
            }
            
            html.append("</td>");
            html.append("</tr>");
        }
        
        html.append("</tbody>");
        html.append("</table>");
        
        // Footer
        html.append("<div style='text-align:center;margin-top:40px;padding-top:20px;border-top:1px solid #dee2e6;color:#6c757d;'>");
        html.append("<p><strong>Sistema de Biblioteca ADSO</strong></p>");
        html.append("<p>Tecnolog√≠a en An√°lisis y Desarrollo de Software</p>");
        html.append("<div style='margin-top:20px;'>");
        html.append("<button onclick='window.print()' style='background:#28a745;color:white;border:none;padding:10px 20px;border-radius:5px;margin-right:10px;cursor:pointer;'>üñ®Ô∏è Imprimir Reporte</button>");
        html.append("<button onclick='history.back()' style='background:#6c757d;color:white;border:none;padding:10px 20px;border-radius:5px;cursor:pointer;'>‚Üê Volver al Dashboard</button>");
        html.append("</div>");
        html.append("</div>");
        
        html.append("</div>");
        html.append("</body></html>");
        
        return html.toString();
    }
}